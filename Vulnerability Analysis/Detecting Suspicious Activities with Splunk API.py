# Incident Response - Detecting Suspicious Activities in Splunk Logs with Splunk API:


import requests

# Function to fetch logs from Splunk API
def fetch_splunk_logs(api_url, username, password, search_query):
    session = requests.Session()
    session.auth = (username, password)
    search_url = f"{api_url}/services/search/jobs"
    search_params = {
        "search": search_query,
        "output_mode": "json",
    }
    response = session.post(search_url, data=search_params, verify=False)
    if response.status_code == 201:
        job_data = response.json()
        job_id = job_data["sid"]
        search_results_url = f"{api_url}/services/search/jobs/{job_id}/results"
        response = session.get(search_results_url, verify=False)
        if response.status_code == 200:
            log_entries = response.json()
            return log_entries.get("results", [])
    return []

# Function to detect suspicious activities in Splunk logs
def detect_suspicious_activity(log_entries):
    for entry in log_entries:
        message = entry.get("message")
        if "Failed login attempt" in message:
            username = entry.get("username")
            source_ip = entry.get("source_ip")
            timestamp = entry.get("timestamp")
            # Add your logic here to handle the incident
            # For example, log the incident, alert the security team, or block the suspicious IP address

# Example usage:
if __name__ == "__main__":
    SPLUNK_API_URL = "https://your-splunk-instance.com:8089"
    SPLUNK_USERNAME = "your_splunk_username"
    SPLUNK_PASSWORD = "your_splunk_password"
    SEARCH_QUERY = "index=your_index sourcetype=your_sourcetype earliest=-1d"  # Modify this query as needed

    log_entries = fetch_splunk_logs(SPLUNK_API_URL, SPLUNK_USERNAME, SPLUNK_PASSWORD, SEARCH_QUERY)
    detect_suspicious_activity(log_entries)
